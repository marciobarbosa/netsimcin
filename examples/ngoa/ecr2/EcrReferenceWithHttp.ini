#
# This ini file is for the ECR [1] study of next-generation optical access
# architectures.
#
# It models a web user (HTTP 1.1) browsing web pages with several embedded
# objects (e.g., images, applets, frames, etc) based on [2].
# It uses HTTPClientApp and TCPGenericSrvApp.
#
# To try, type "./run -f EcrReferenceWithHttp.ini"
#
# References
# [1] N. K. Shankaranarayanan, Z. Jiang, and P. Mishra, "User-perceived performance
#		of web-browsing and interactive data in HFC cable access networks," Proc. of ICC,
#		June 2001.
# [2] J. J. Lee and M. Gupta, "A new traffic model for current user web browsing
#		behavior," Research@Intel, 2007 [Available online at
#		"http://blogs.intel.com/research/HTTP%20Traffic%20Model_v1%201%20white%20paper.pdf"].
#


[General]
network = EcrTest
#debug-on-errors = true
sim-time-limit = 4h

#################################
# results recording
#################################
result-dir = results/EcrReferenceWithHttp
**.client[*].tcpApp[*].**.scalar-recording = true
**.scalar-recording = false
### storing vectors and scalars

#################################
# command environment settings
#################################
cmdenv-express-mode = true
cmdenv-performance-display = false

#################################
# Tk environment settings
#################################
tkenv-plugin-path = ../../../etc/plugins
**.vector-recording = false

#################################
# Network/system settings
#################################
*.N = 1  # number of subscribers (ONUs); now we assume that there is only one client per ONU.
#*.distribution_rate = ${dr=10}Mbps	# rate of distribution fiber (dr)
#*.feeder_rate = ${fr=10}Mbps	# rate of feeder fiber (fr)
### rate of backbone network (br)
#*.backbone_rate = 100Gbps
### delay in backbone network (bd)
#*.backbone_delay = 5ms
#**.client[*].numTcpApps = ${n=1..10}	# number of TCP applications per subscriber (n)

#################################
# Http client
#################################
**.client[*].numTcpApps = 1
**.client[*].tcpAppType = "HttpClientApp"
**.client[*].tcpApp[*].address = ""
### Due to issues in assigning ephemeral port numer, we assign port number
### statically in HttpClientApp.ned instead.
#**.client[*].tcpApp[*].port = -1
**.client[*].tcpApp[*].connectAddress = "server"
**.client[*].tcpApp[*].connectPort = 80

#################################
# Web workload model based on [1]
#################################
**.client[*].tcpApp[*].startTime = uniform(0min, 1min)
### This will be the "replyLength" of the 1st request (for HTML object).
**.client[*].tcpApp[*].htmlObjectLength = trunc_lognormal(7.90272B, 1.7643B, 0B, 2MB)
**.client[*].tcpApp[*].numEmbeddedObjects = gamma_d(0.141385, 40.3257)
**.client[*].tcpApp[*].embeddedObjectLength = trunc_lognormal(7.51384B, 2.17454B, 0B, 6MB)
**.client[*].tcpApp[*].requestLength = uniform(0B, 700B)
**.client[*].tcpApp[*].parsingTime = trunc_lognormal(-1.24892s, 2.08427s, 0s, 300s)
### no time gap between requests (for embedded objects)
**.client[*].tcpApp[*].thinkTime = 0s
### time gap between sessions ("Reading Time" in [2])
**.client[*].tcpApp[*].idleInterval = lognormal(-0.495204s, 2.7731s)
**.client[*].tcpApp[*].reconnectInterval = 30s

#################################
# Http server
#################################
**.server.numTcpApps = 1
**.server.tcpAppType = "TCPGenericSrvApp"
### Another choice of server app (it does the same as TCPGenericSrvApp):
#  **.server.tcpAppType="TCPSrvHostApp"
#  **.server.tcpApp[0].serverThreadClass="TCPGenericSrvThread"
**.server.tcpApp[0].address = ""
**.server.tcpApp[0].port = 80
**.server.tcpApp[0].replyDelay = 0

#################################
# General TCP settings
#################################
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
#**.tcp.sendQueueClass = "TCPVirtualDataSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
#**.tcp.receiveQueueClass = "TCPVirtualDataRcvQueue"

#################################
# NIC configuration
#################################
#**.ppp[*].queueType = "DropTailQueue" # in routers
#**.ppp[*].queueType = "REDQueue" # in routers (for better fairness among sessions)
#**.ppp[*].queue.frameCapacity = 10  # in routers
#**.ppp[*].queue.frameCapacity = 100  # in routers


[Config N1_dr10_fr10_br1000_bd5]
*.uni_rate = ${ur=10}Gbps  # rate of UNI (ur)
*.distribution_rate = ${dr=10}Gbps  # rate of distribution fiber (dr)
*.feeder_rate = ${fr=10}Gbps  # rate of feeder fiber (fr)
*.backbone_rate = ${br=1000}Gbps  # rate of backbone link (br)
**.client[*].numTcpApps = ${n=1..400}  # number of TCP applications per client (n)


#[Config N1_dr10_fr10_br1_bd5]
#*.distribution_rate = 10Mbps
#*.feeder_rate = 10Mbps
#**.client[*].numTcpApps = ${n=1..10}
#
#
#[Config N1_dr20_fr20_br1_bd5]
#*.distribution_rate = 20Mbps
#*.feeder_rate = 20Mbps
#**.client[*].numTcpApps = ${n=1..20}
#
#
#[Config N1_dr30_fr30_br1_bd5]
#*.distribution_rate = 30Mbps
#*.feeder_rate = 30Mbps
#**.client[*].numTcpApps = ${n=1..30}
#
#
#[Config N1_dr40_fr40_br1_bd5]
#*.distribution_rate = 40Mbps
#*.feeder_rate = 40Mbps
#**.client[*].numTcpApps = ${n=1..40}
#
#
#[Config N1_dr50_fr50_br1_bd5]
#*.distribution_rate = 50Mbps
#*.feeder_rate = 50Mbps
#**.client[*].numTcpApps = ${n=1..50}
#
#
#[Config N1_dr60_fr60_br1_bd5]
#*.distribution_rate = 60Mbps
#*.feeder_rate = 60Mbps
#**.client[*].numTcpApps = ${n=1..60}
#
#
#[Config N1_dr70_fr70_br1_bd5]
#*.distribution_rate = 70Mbps
#*.feeder_rate = 70Mbps
#**.client[*].numTcpApps = ${n=1..70}
#
#
#[Config N1_dr80_fr80_br1_bd5]
#*.distribution_rate = 80Mbps
#*.feeder_rate = 80Mbps
#**.client[*].numTcpApps = ${n=1..80}
#
#
#[Config N1_dr90_fr90_br1_bd5]
#*.distribution_rate = 90Mbps
#*.feeder_rate = 90Mbps
#**.client[*].numTcpApps = ${n=1..90}
#
#
#[Config N1_dr100_fr100_br1_bd5]
#*.distribution_rate = 100Mbps
#*.feeder_rate = 100Mbps
#**.client[*].numTcpApps = ${n=1..100}
#
#
#[Config N1_br1_bd5]
#**.client[*].numTcpApps = ${n=1, 2, 5, 10, 20, 30, 40, 50, 100..400 step 100}
#*.distribution_rate = ${dr=1..10}Mbps
#*.feeder_rate = ${dr}Mbps
