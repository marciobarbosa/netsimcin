#
# This ini file is for the ECR [1] study of next-generation optical access
# architectures.
# It models a web user (HTTP 1.1) browsing web pages with several embedded
# objects (e.g., images, applets, frames, etc) based on [2].
# It uses HTTPClientApp and TCPGenericSrvApp.
#
# To try, type "./run -f TdmPonWithHttp.ini"
#
# References
# [1] N. K. Shankaranarayanan, Z. Jiang, and P. Mishra, "User-perceived performance
#		of web-browsing and interactive data in HFC cable access networks," Proc. of ICC,
#		June 2001.
# [2] J. J. Lee and M. Gupta, "A new traffic model for current user web browsing
#		behavior," Research@Intel, 2007 [Available online at
#		"http://blogs.intel.com/research/HTTP%20Traffic%20Model_v1%201%20white%20paper.pdf"].
#


[General]
network = ECRTest
#debug-on-errors = true
#sim-time-limit = 1000h
sim-time-limit = 24h
# storing vectors and scalars
result-dir = TdmPonWithHttp

#################################
# command environment settings
#################################
cmdenv-express-mode = true
cmdenv-performance-display = false

#################################
# Tk environment settings
#################################
tkenv-plugin-path = ../../../etc/plugins
**.vector-recording = false

#################################
# Network/system settings
#################################
# number of subscribers (N)
*.n = 16
# rate of distribution fiber (dr)
*.distribution_rate = 10Mbps
# rate of feeder fiber (fr)
*.feeder_rate = 10Mbps
# rate of backbone network (br)
*.backbone_rate = 1Tbps
# delay in backbone network (bd)
*.backbone_delay = 5ms
### number of TCP applications per subscriber (n)
###**.cli[*].numTcpApps = ${n=1..10}

#################################
# Http client
#################################
**.cli[*].numTcpApps = 1
**.cli[*].tcpAppType = "HttpClientApp"
**.cli[*].tcpApp[*].address = ""
# Due to issues in assigning ephemeral port numer, we assign port number
# statically in HttpClientApp.ned instead.
###**.cli[*].tcpApp[*].port = -1
**.cli[*].tcpApp[*].connectAddress = "srv"
**.cli[*].tcpApp[*].connectPort = 80

#################################
# Web workload model based on [1]
#################################
**.cli[*].tcpApp[*].startTime = uniform(0min, 1min)
# This will be the "replyLength" of the 1st request (for HTML object).
**.cli[*].tcpApp[*].htmlObjectLength = trunc_lognormal(7.90272B, 1.7643B, 0B, 2MB)
**.cli[*].tcpApp[*].numEmbeddedObjects = gamma_d(0.141385, 40.3257)
**.cli[*].tcpApp[*].embeddedObjectLength = trunc_lognormal(7.51384B, 2.17454B, 0B, 6MB)
**.cli[*].tcpApp[*].requestLength = uniform(0B, 700B)
**.cli[*].tcpApp[*].parsingTime = trunc_lognormal(-1.24892s, 2.08427s, 0s, 300s)
# no time gap between requests (for embedded objects)
**.cli[*].tcpApp[*].thinkTime = 0s
# time gap between sessions ("Reading Time" in [2])
**.cli[*].tcpApp[*].idleInterval = lognormal(-0.495204s, 2.7731s)
**.cli[*].tcpApp[*].reconnectInterval = 30s

#################################
# Http server
#################################
**.srv.numTcpApps = 1
**.srv.tcpAppType = "TCPGenericSrvApp"
# Another choice of server app (it does the same as TCPGenericSrvApp):
#  **.srv.tcpAppType="TCPSrvHostApp"
#  **.srv.tcpApp[0].serverThreadClass="TCPGenericSrvThread"
**.srv.tcpApp[0].address = ""
**.srv.tcpApp[0].port = 80
**.srv.tcpApp[0].replyDelay = 0

#################################
# General TCP settings
#################################
**.tcp.sendQueueClass = "TCPMsgBasedSendQueue"
#**.tcp.sendQueueClass = "TCPVirtualDataSendQueue"
**.tcp.receiveQueueClass = "TCPMsgBasedRcvQueue"
#**.tcp.receiveQueueClass = "TCPVirtualDataRcvQueue"

#################################
# NIC configuration
#################################
###**.ppp[*].queueType = "DropTailQueue" # in routers
**.ppp[*].queueType = "REDQueue" # in routers (for better fairness among sessions)
###**.ppp[*].queue.frameCapacity = 10  # in routers
**.ppp[*].queue.frameCapacity = 100  # in routers


[Config N16_dr10_fr10_br1_bd5]
**.cli[*].numTcpApps = ${n=1, 2, 5, 10..100 step 10}
