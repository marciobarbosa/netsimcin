///
/// @file   HybridPon.h
/// @author Kyeong Soo (Joseph) Kim <kyeongsoo.kim@gmail.com>
/// @date   2009-06-30
///
/// @brief  Defines system-wide constants and types for hybrid TDM/WDM-PON models.
///
/// @remarks Copyright (C) 2009-2010 Kyeong Soo (Joseph) Kim. All rights reserved.
///
/// @remarks This software is written and distributed under the GNU General
///          Public License Version 2 (http://www.gnu.org/licenses/gpl-2.0.html).
///          You must not remove this notice, or any other, from this software.
///


#ifndef __HYBRID_PON_H
#define __HYBRID_PON_H


#include <list>
#include <queue>
#include <string>
#include <vector>
#include <omnetpp.h>
#include "HybridPonFrame_m.h"
#include "OpticalFrame_m.h"
#include "MACAddress.h"
#include "EtherFrame_m.h"
#include "Ethernet.h"


using namespace std;


//------------------------------------------------------------------------------
//	Constants
//------------------------------------------------------------------------------
//const double	AVG_PKT_SIZE		= 336.77;	// average size of IP packets in octets
//                                                //      generated by IpPktSize()
const double	SPEED_OF_LIGHT		= 2.0e5;	// speed of light in the fiber in km/sec
const_simtime_t	GUARD_TIME			= 50.0e-9;	// in seconds
const double    INF                 = 10.0e+10;

// The size of fields below all given in "bits"

// - For PON frame
const int		PREAMBLE_SIZE		= 8;
const int		DELIMITER_SIZE		= 16;
//const int		ID_SIZE				= 1;
const int		FLAG_SIZE				= 8;
const int		GRANT_SIZE			= 16;
const int		REPORT_SIZE		= 16;
const int       POLL_FRAME_SIZE     = 2*(PREAMBLE_SIZE + DELIMITER_SIZE)
    + FLAG_SIZE + GRANT_SIZE + REPORT_SIZE;
const int       DS_DATA_OVERHEAD_SIZE    = PREAMBLE_SIZE + DELIMITER_SIZE + FLAG_SIZE;
    // Every fields to be added to a DS Ethernet frame
const int       DS_GRANT_OVERHEAD_SIZE	 = PREAMBLE_SIZE + DELIMITER_SIZE + FLAG_SIZE + GRANT_SIZE;
    // Every fields to be added to a grant (CW)
const int       US_DATA_OVERHEAD_SIZE    = PREAMBLE_SIZE + DELIMITER_SIZE + REPORT_SIZE;
    // Every fields to be added to US Ethernet frames

// - For Ethernet frame
//const int       ETH_HEADER_SIZE		= 144;      // ??? -> PA(8)+DA(6)+SA(6)+FT(2)=22 octets
const int       ETH_HEADER_SIZE		= 112;      // DA(6)+SA(6)+FT(2)=14 octets (excluding PA(8))
const int       ETH_CRC_SIZE		= 32;       // 4 octets
const int       ETH_OVERHEAD_SIZE   = ETH_HEADER_SIZE + ETH_CRC_SIZE;
    // Every fields to be added to payload
//const int       MAX_ETH_FRAME_SIZE	= 12176;    // ???
const int       MAX_ETH_FRAME_SIZE	= 12144;    // 1518 octets
const int		MIN_ETH_FRAME_SIZE	= 512;		// 64 octets

//const int       OLT_ADDRESS     = 100;

// Message types for packets/frames and events
enum MessageType {

	// Actual messages delievered through channels
/* 	IP_PACKET			= 100, */
/* 	ETH_FRAME           = 200, */
	HYBRID_PON_FRAME	= 300,

	// Messages to interact with FIFOs at ONUs and OLTs
	ETH_FRAME_REQUEST   = 500,
	STATUS_REQUEST      = 501,
	STATUS_REPLY        = 502,

	// Messages for scheduling events at Scheduler
	ONU_POLL            = 700,
    ACTUAL_TX           = 701,
    ACTUAL_VOQ_TX       = 702,
    ACTUAL_TX_POLL      = 703,

    // Message indicating to do batch scheduling
   	BATCH_TIMEOUT       = 800,

	// Messages for tracing TX & RX usages
	RELEASE_TX			= 900,
	RECEIVE_RX			= 901,
	RELEASE_RX			= 902
};

//------------------------------------------------------------------------------
//	Inline functions
//------------------------------------------------------------------------------
template<class T>
inline T sqr(const T& a) {return a*a;}

//------------------------------------------------------------------------------
//	New types
//------------------------------------------------------------------------------
typedef cQueue					    Voq;
typedef vector<Voq>				    VoqVector;
typedef vector<cQueue::Iterator>    VoqIterVector;
typedef	vector<double>			    DoubleVector;
typedef	vector<DoubleVector>	    DoubleMatrix;
typedef vector<bool>                BoolVector;
typedef	vector<int>				    IntVector;
typedef vector<IntVector>		    IntMatrix;
typedef	vector<long>			    LongVector;
typedef vector<LongVector>		    LongMatrix;
typedef vector<HybridPonMessage *>        HybridPonMsgVector;
typedef vector<HybridPonMsgVector>        HybridPonMsgMatrix;
typedef struct _OnuPoll
{
    int         channel;
    simtime_t   time;
}                                   OnuPoll;
typedef list<OnuPoll>               OnuPollList;
typedef vector<string>              StringVector;
typedef	vector<simtime_t>		    TimeVector;
typedef	vector<TimeVector>		    TimeMatrix;

// For the compatability of boolean constants between g++ and VC++
// - false & true in g++
// - FALSE & TRUE in VC++
#ifdef _MSC_VER
#	define false						FALSE
#	define true						TRUE
#else
#	ifndef FALSE
#		define FALSE						false
#		define TRUE						true
#	endif
#endif


#endif	// __HYBRID_PON_H
